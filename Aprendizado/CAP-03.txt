- Aqui configuramos a nossa base de dados com o Microserviço de Pagamentos:


- Vamos usar Migrations, pois com esse podemos versionar a base de dados (ter o histórico da base de dados e se precisar podemos voltar para uma versão
específica). 


- Os arquivos da Migration devem ficar na pasta resources/db.migration e o nome deve segui o padrão: V{numero}__{nome do comando}.sql
por exemplo = V1__criar_tabela_pagamentos.sql


- No arquivo V1__criar_tabela_pagamentos.sql adicionamos o trecho:

            CREATE TABLE pagamentos (
                id bigint(20) NOT NULL AUTO_INCREMENT,
                valor decimal(19,2) NOT NULL,
                nome varchar(100) DEFAULT NULL,
                numero varchar(19) DEFAULT NULL,
                expiracao varchar(7) DEFAULT NULL,
                codigo varchar(3) DEFAULT NULL,
                status varchar(255) NOT NULL,
                forma_de_pagamento_id bigint(20) NOT NULL,
                pedido_id bigint(20) NOT NULL,
                PRIMARY KEY (id)
            );


- Tenha em mente que não editamos um arquivo de Migration já feito, ou seja, não vamos editar o V1__criar_tabela_pagamentos.sql. Caso surja uma mudançã da
tabela pagamentos ou a gente queira fazer outras coisas no banco, devemos criar novos arquivos de migration, no caso V2, V3...


- Agora vamos definir no arquivo application.properties para podemos usar o banco de dados MySql:

            spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
            spring.datasource.url=jdbc:mysql://localhost:3306/alurafood-pagamento?createDatabaseIfNotExist=true
            spring.datasource.username=root
            spring.datasource.password=mysql
            spring.jpa.show-sql=true


	O ultimo comando serve para exibir os logs do banco no console da aplicação.


- Suba o projeto e veja se a tabela foi pagamentos foi criada no banco de dados. Uma tabela do flyway também é criada, essa é a responsável pelo Histórico
da base de dados ( com ela o Flyway sabe quais migrations já foram executadas - ele executa somentes migrations novas).


- Ao subir o projeto, tivemos um erro referente ao ModelMapper, pois o Spring por padrão não sabe criar um Bean do mesmo (não sabe instanciar o objeto desse
tipo) e tentamos criar um objeto do tipo ModelMapper na classe PagamentoService. A solução é:

	
	1) Criar o pacote config;

	2) Dentro desse pacote criar a classe Configuracao e anotá-la com @Configuration. Ela deve ficar assim:


            @Configuration
            public class Configuracao {

                @Bean
                public ModelMapper obterModelMapper() {
                    return new ModelMapper();
                }
            }

	Note que basta criar um método com nome qualquer, que retorna o objeto que queremos criar. O método deve ser anotado com @Bean, pois agora o ModelMapper
	é um Bean pro Spring, logo ele consegue injetar um objeto desse tipo!


- Agora devemos subir a aplicação e testá-la com o Postman (executar os métodos da Collection do Postman: MS Pagamentos - Alura - Formação Spring e Rabbit)



- Tentamos cadastrar um Pagamento com a seguinte request:

            {
                "valor": 700,
                "nome": "Jacqueline",
                "pedidoId": 1,
                "formaDePagamentoId": 1
            }

	No caso seria um pagamento em dinheiro, por isso tiramos os dados do cartão. Mas tivemos um erro, pois na classe PagamentoDto usamos anotações de 
	validação que não deixa os dados do cartão ser null! Além dessa validação na classe DTO que usa anotações do Bean Validation, temos validações 
	diretamente no Script do banco de dados, no caso V1__criar_tabela_pagamentos.sql e de nada adianta mudar somente em um local, temos que mudar os dois!
	E tenha em mente que a alteração da Migration na verdade será um novo arquivo, por exemplo: V1__alterar_tabela_pagamentos.sql




























